ChatGPT said:

To allow the user to select multiple project bases and multiple projects from the selected crew, we need to adjust the form structure and implement multiple selections.

Here’s the breakdown of how we'll handle it:

Multiple Project Base Selection: The user can select multiple project bases for the selected crew.

Multiple Project Selection per Project Base: Once the project bases are selected, the user can select multiple projects under each selected project base.

Step 1: Adjust the Data Structure

To accommodate multiple selections, we need to adjust how the selected project bases and projects are stored. Each project base can have a list of selected projects.

export interface UpdateContentModel {
  fileType: string;
  crew: string;
  selectedProjectBases: {
    base: string;           // The project base
    projects: string[];     // List of selected projects under that base
  }[];
  sourceBranch: string;
  featureBranch: string;
  fields: {
    placeholder: string;
    delimiter: string;
    indexPosition: string;
    replacementContent: string;
  }[];
  commitMessage: string;
  createPr: boolean;
}


Step 2: Modify the Component Logic

We'll need to:

Handle the selection of multiple project bases for the selected crew.

For each selected project base, allow the user to select multiple projects.

Update the form to reflect these changes.

Updated UpdateContentComponent
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { UpdateContentModel } from './update-content.model'; // Import the model

@Component({
  selector: 'app-update-content',
  templateUrl: './update-content.component.html',
  styleUrls: ['./update-content.component.css']
})
export class UpdateContentComponent implements OnInit {
  updateForm: FormGroup;
  fileTypes = ['Jenkinsfile', 'Dockerfile', 'gradle.properties'];
  crews = ['Crew A', 'Crew B', 'Crew C'];
  projects = {
    'Crew A': {
      'Project Base 1': ['Project 1A', 'Project 1B'],
      'Project Base 2': ['Project 2A', 'Project 2B']
    },
    'Crew B': {
      'Project Base 3': ['Project 3A', 'Project 3B'],
      'Project Base 4': ['Project 4A', 'Project 4B']
    },
    'Crew C': {
      'Project Base 5': ['Project 5A', 'Project 5B'],
      'Project Base 6': ['Project 6A', 'Project 6B']
    }
  };

  selectedCrewProjects = {};  // Store the selected crew's project bases and projects
  selectedCrew: string = '';  // To store the selected crew

  constructor(private fb: FormBuilder, private http: HttpClient) {}

  ngOnInit(): void {
    this.updateForm = this.fb.group({
      fileType: ['Jenkinsfile', Validators.required],
      crew: [null, Validators.required],
      selectedProjectBases: this.fb.array([]), // Form array for multiple project bases
      sourceBranch: ['', Validators.required],
      featureBranch: ['', Validators.required],
      fields: this.fb.array([this.createField()]),
      commitMessage: ['', Validators.required],
      createPr: [false]
    });
  }

  // Getter for selectedProjectBases formArray
  get selectedProjectBases() {
    return this.updateForm.get('selectedProjectBases') as FormArray;
  }

  // Getter for fields formArray
  get fields() {
    return this.updateForm.get('fields') as FormArray;
  }

  // Method to create a dynamic field for placeholder, delimiter, etc.
  createField() {
    return this.fb.group({
      placeholder: ['', Validators.required],
      delimiter: ['', Validators.required],
      indexPosition: ['', Validators.required],
      replacementContent: ['', Validators.required]
    });
  }

  // Method to add a new field
  addField() {
    this.fields.push(this.createField());
  }

  // Method to handle crew change and load project bases
  onCrewChange() {
    const selectedCrew = this.updateForm.get('crew')?.value;
    if (selectedCrew) {
      this.selectedCrewProjects = this.projects[selectedCrew] || {};
      this.selectedCrew = selectedCrew; // Save selected crew
      this.selectedProjectBases.clear();
    }
  }

  // Method to handle project base selection
  onProjectBaseChange(event: any, projectBase: string) {
    const selectedBase = projectBase;
    const isChecked = event.target.checked;
    
    if (isChecked) {
      // Create a form group for projects under this project base
      this.selectedProjectBases.push(this.fb.group({
        base: selectedBase,
        projects: this.fb.array([]) // Initialize with an empty array for projects
      }));
    } else {
      // Remove the project base from the selected project bases
      const index = this.selectedProjectBases.controls.findIndex((control) => control.value.base === selectedBase);
      if (index !== -1) {
        this.selectedProjectBases.removeAt(index);
      }
    }
  }

  // Getter for projects of each project base
  getProjects(base: string) {
    const selectedBaseGroup = this.selectedProjectBases.controls.find((control) => control.value.base === base);
    return selectedBaseGroup ? selectedBaseGroup.get('projects') as FormArray : this.fb.array([]);
  }

  // Method to handle project selection within a project base
  onProjectChange(event: any, project: string, projectBase: string) {
    const selectedBaseGroup = this.selectedProjectBases.controls.find((control) => control.value.base === projectBase);
    const projectArray = selectedBaseGroup ? selectedBaseGroup.get('projects') as FormArray : this.fb.array([]);
    
    if (event.checked) {
      projectArray.push(this.fb.control(project));
    } else {
      const index = projectArray.controls.findIndex((control) => control.value === project);
      if (index !== -1) {
        projectArray.removeAt(index);
      }
    }
  }

  // Handle select all projects within a project base
  toggleSelectAll(event: any, projectBase: string) {
    const selectedBaseGroup = this.selectedProjectBases.controls.find((control) => control.value.base === projectBase);
    const projectArray = selectedBaseGroup ? selectedBaseGroup.get('projects') as FormArray : this.fb.array([]);

    if (event.checked) {
      this.projects[this.selectedCrew][projectBase].forEach((project) => {
        if (!projectArray.value.includes(project)) {
          projectArray.push(this.fb.control(project));
        }
      });
    } else {
      projectArray.clear();
    }
  }

  // Handle form submission
  onSubmit() {
    if (this.updateForm.valid) {
      const formValue = this.updateForm.value;

      // Map form data to model object
      const model: UpdateContentModel = {
        fileType: formValue.fileType,
        crew: formValue.crew,
        selectedProjectBases: formValue.selectedProjectBases.map((projectBase) => ({
          base: projectBase.base,
          projects: projectBase.projects
        })),
        sourceBranch: formValue.sourceBranch,
        featureBranch: formValue.featureBranch,
        fields: formValue.fields.map((field) => ({
          placeholder: field.placeholder,
          delimiter: field.delimiter,
          indexPosition: field.indexPosition,
          replacementContent: field.replacementContent,
        })),
        commitMessage: formValue.commitMessage,
        createPr: formValue.createPr,
      };

      // API call to submit data
      this.http.post('https://your-api-endpoint.com/update', model)
        .subscribe(
          (response) => {
            console.log('API response:', response);
            // Handle success (e.g., display success message)
          },
          (error) => {
            console.error('Error submitting form:', error);
            // Handle error (e.g., display error message)
          }
        );
    } else {
      console.log('Form is invalid');
    }
  }
}

Explanation of Changes:

Multiple Project Base Selection:

The selectedProjectBases form array holds the selected project bases. For each project base selected, an associated array of projects is added using the projects form array.

Selecting Projects for Each Project Base:

For each selected project base, the associated projects are displayed as checkboxes.

The user can select multiple projects under each project base, and the selected projects are stored in the projects form array for that specific project base.

Select All Projects in a Project Base:

The "Select All" checkbox allows the user to select all projects within a specific project base.

The toggleSelectAll method is used to select or deselect all projects under a given project base.

Mapping the Form to the Model:

When submitting the form, we map the selected project bases and their associated projects to the UpdateContentModel.

The selectedProjects array in the model is populated with the projects selected under each project base.

Step 3: Update the HTML for Multiple Project Base and Projects Selection

Here’s how the HTML should look to accommodate multiple project base and project selections:

<div class="container mt-4">
  <form [formGroup]="updateForm" (ngSubmit)="onSubmit()">
    <!-- File Type Dropdown -->
    <div class="mb-3">
      <label for="fileType" class="form-label">File Type</label>
      <select id="fileType" class="form-select" formControlName="fileType">
        <option *ngFor="let fileType of fileTypes" [value]="fileType">{{ fileType }}</option>
      </select>
    </div>

    <!-- Crew Dropdown -->
    <div class="mb-3">
      <label for="crew" class="form-label">Crew</label>
      <select id="crew" class="form-select" formControlName="crew" (change)="onCrewChange()">
        <option *ngFor="let crew of crews" [value]="crew">{{ crew }}</option>
      </select>
    </div>

    <!-- Project Base Selection -->
    <div *ngIf="selectedCrewProjects" class="mb-3">
      <label for="projectBases" class="form-label">Project Base</label>
      <div *ngFor="let projectBase of objectKeys(selectedCrewProjects)">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="projectBase-{{ projectBase }}" (change)="onProjectBaseChange($event, projectBase)">
          <label class="form-check-label" for="projectBase-{{ projectBase }}">{{ projectBase }}</label>
        </div>

        <!-- Projects within each Project Base -->
        <div *ngIf="getProjects(projectBase).length > 0">
          <div class="form-check">
            <input type="checkbox" class="form-check-input" (change)="toggleSelectAll($event, projectBase)" id="selectAll-{{ projectBase }}">
            <label class="form-check-label" for="selectAll-{{ projectBase }}">Select All</label>
          </div>
          <div *ngFor="let project of selectedCrewProjects[projectBase]">
            <div class="form-check">
              <input type="checkbox" class="form-check-input" (change)="onProjectChange($event, project, projectBase)" id="project-{{ project }}">
              <label class="form-check-label" for="project-{{ project }}">{{ project }}</label>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Source Branch -->
    <div class="mb-3">
      <label for="sourceBranch" class="form-label">Source Branch</label>
      <input type="text" id="sourceBranch" class="form-control" formControlName="sourceBranch">
    </div>

    <!-- Feature Branch -->
    <div class="mb-3">
      <label for="featureBranch" class="form-label">Feature Branch</label>
      <input type="text" id="featureBranch" class="form-control" formControlName="featureBranch">
    </div>

    <!-- Dynamic Fields -->
    <div formArrayName="fields">
      <div *ngFor="let field of fields.controls; let i = index" [formGroupName]="i" class="border p-3 mb-3">
        <!-- Add dynamic field controls here -->
      </div>
    </div>

    <!-- Commit Message -->
    <div class="mb-3">
      <label for="commitMessage" class="form-label">Commit Message</label>
      <input type="text" id="commitMessage" class="form-control" formControlName="commitMessage">
    </div>

    <!-- Create PR Radio Button -->
    <div class="mb-3">
      <label class="form-label">Create Pull Request</label><br>
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" id="createPrYes" value="true" formControlName="createPr">
        <label class="form-check-label" for="createPrYes">Yes</label>
      </div>
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" id="createPrNo" value="false" formControlName="createPr">
        <label class="form-check-label" for="createPrNo">No</label>
      </div>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="updateForm.invalid">Submit</button>
  </form>
</div>

Conclusion

In this updated solution:

The user can select multiple project bases for the selected crew.

After selecting a project base, the user can select multiple projects under that base.

The select all checkbox allows the user to select or deselect all projects under a selected project base.

The form is submitted with the correct model structure, including all selected project bases and their respective projects.

This approach gives users the flexibility to select multiple project bases and projects from the available options.